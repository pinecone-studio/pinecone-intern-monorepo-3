name: "CI / preview-and-E2E"
on:
  pull_request:
    types: [labeled, synchronize, edited]
    branches:
      - main
    paths-ignore:
      - '.nxignore'

permissions:
  id-token: write
  contents: read
  pull-requests: write

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  preview-and-E2E:
    runs-on: ubuntu-latest
    if: "${{ github.event.label.name == 'PR status: code ready' }}"
    timeout-minutes: 20
    env:
      VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      ACTION_TYPE: PULL_REQUEST_ACTION
      CYPRESS_RECORD_KEY: ${{ secrets.CYPRESS_RECORD_KEY }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18.19.1'
          cache: 'npm'

      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: 1.1.10

      - name: Cache node modules
        id: cache-nodemodules
        uses: actions/cache@v3
        with:
          path: node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('**/bun.lock') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Install dependencies
        run: bun install -y
        if: "${{ steps.cache-nodemodules.outputs.cache-hit != 'true' }}"

      - name: Install Vercel CLI
        run: bun add --global vercel@latest
        if: "${{ steps.cache-nodemodules.outputs.cache-hit != 'true' }}"

      - name: Cache Cypress binary
        uses: actions/cache@v3
        with:
          path: ~/.cache/Cypress
          key: ${{ runner.os }}-cypress-${{ hashFiles('**/package.json') }}
          restore-keys: |
            ${{ runner.os }}-cypress-

      - name: Install Cypress
        run: bunx cypress install

      - name: Setup Canvas
        if: "${{ steps.cache-nodemodules.outputs.cache-hit != 'true' }}"
        run: npm rebuild canvas

      - name: Setup NX
        uses: nrwl/nx-set-shas@v4

      - name: Track main branch
        run: git branch --track main origin/main

      - name: Export environment variables
        run: |
          export NX_BASE=${{ env.NX_BASE }}
          export NX_HEAD=${{ env.NX_HEAD }}
          export VERCEL_TOKEN=${{ env.VERCEL_TOKEN }}
          export GITHUB_TOKEN=${{ env.GITHUB_TOKEN }}
          bash ./tools/scripts/export-action-env.sh

      - name: Generate Preview Links
        run: bunx nx preview-action scripts

      - name: Wait for deployments
        run: sleep 30

      - name: Run E2E tests on affected projects
        run: bunx nx affected -t e2e --parallel=2 --output-style=stream-without-prefixes
        env:
          CYPRESS_baseUrl: ${{ steps.preview.outputs.preview_url }}

      - name: Upload Cypress screenshots
        uses: actions/upload-artifact@v3
        if: failure()
        with:
          name: cypress-screenshots
          path: cypress/screenshots/
          retention-days: 7

      - name: Upload Cypress videos
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: cypress-videos
          path: cypress/videos/
          retention-days: 7

      - name: Comment preview links on PR
        uses: actions/github-script@v6
        if: always()
        with:
          script: |
            const fs = require('fs');
            try {
              // Read preview URLs from file (generated by preview-action)
              const previewData = JSON.parse(fs.readFileSync('preview-urls.json', 'utf8'));
              
              let comment = '## ðŸš€ Preview Deployments\n\n';
              
              for (const [appName, url] of Object.entries(previewData)) {
                comment += `- **${appName}**: [Preview Link](${url})\n`;
              }
              
              comment += '\n---\n*Preview links are automatically generated for each pull request.*';
              
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: comment
              });
            } catch (error) {
              console.log('No preview URLs found');
            }
