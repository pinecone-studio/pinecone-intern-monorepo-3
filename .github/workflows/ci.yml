name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    services:
      mongodb:
        image: mongo:6.0
        ports:
          - 27017:27017
        options: >-
          --health-cmd "mongosh --eval 'db.adminCommand(\"ping\")'"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Run tests
      env:
        MONGODB_URI: mongodb://localhost:27017/concert-ticket-test
        NODE_ENV: test
        JWT_SECRET: test-secret-key
        CORS_ORIGIN: http://localhost:3000
      run: npx nx test ticket-frontend
    
    - name: Build frontend
      env:
        NODE_ENV: production
      run: npx nx build ticket-frontend
    
    - name: Build backend
      env:
        MONGODB_URI: mongodb://localhost:27017/concert-ticket-test
        NODE_ENV: test
        JWT_SECRET: test-secret-key
        CORS_ORIGIN: http://localhost:3000
      run: npx nx build ticket-backend

  deploy:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Build applications
      env:
        MONGODB_URI: ${{ secrets.MONGODB_URI }}
        NODE_ENV: production
        JWT_SECRET: ${{ secrets.JWT_SECRET }}
        CORS_ORIGIN: ${{ secrets.CORS_ORIGIN }}
      run: |
        npx nx build ticket-frontend
        npx nx build ticket-backend
    
    - name: Deploy to production
      run: echo "Deployment step would go here"