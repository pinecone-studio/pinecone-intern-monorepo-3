import { connectToDb } from '../utils/connect-to-db';
import { User } from '../models/model.user';
import { Artist } from '../models/model.artist';
import { Concert } from '../models/model.concert';
import { TicketCategory } from '../models/model.ticket-category';
import { Booking } from '../models/model.booking';
import * as dotenv from 'dotenv';
import * as path from 'path';

// .env —Ñ–∞–π–ª —É–Ω—à–∏—Ö
dotenv.config({ path: path.join(__dirname, '../../.env') });

// –ò–ª“Ø“Ø –¥—ç–ª–≥—ç—Ä—ç–Ω–≥“Ø–π mock data “Ø“Ø—Å–≥—ç—Ö
async function generateMockData() {
  try {
    console.log('üé≠ –î—ç–ª–≥—ç—Ä—ç–Ω–≥“Ø–π mock data “Ø“Ø—Å–≥—ç–∂ —ç—Ö–ª—ç–∂ –±–∞–π–Ω–∞...');
    
    // Environment variables —Ç–æ—Ö–∏—Ä—É—É–ª–∞—Ö
    if (!process.env.MONGODB_URI && !process.env.MONGO_URI) {
      process.env.MONGO_URI = 'mongodb://localhost:27017/concert-ticket';
      console.log('‚ö†Ô∏è  MONGODB_URI —Ç–æ—Ö–∏—Ä—É—É–ª–∞–≥–¥–∞–∞–≥“Ø–π, default —É—Ç–≥–∞ –∞—à–∏–≥–ª–∞–∂ –±–∞–π–Ω–∞');
    }
    
    // MONGODB_URI-–≥ MONGO_URI –±–æ–ª–≥–æ–Ω —Ö—É–≤–∏—Ä–≥–∞—Ö
    if (process.env.MONGODB_URI && !process.env.MONGO_URI) {
      process.env.MONGO_URI = process.env.MONGODB_URI;
    }
    
    if (!process.env.JWT_SECRET) {
      process.env.JWT_SECRET = 'fallback-secret-key-for-development';
      console.log('‚ö†Ô∏è  JWT_SECRET —Ç–æ—Ö–∏—Ä—É—É–ª–∞–≥–¥–∞–∞–≥“Ø–π, default —É—Ç–≥–∞ –∞—à–∏–≥–ª–∞–∂ –±–∞–π–Ω–∞');
    }
    
    // Database —Ö–æ–ª–±–æ–æ—Å “Ø“Ø—Å–≥—ç—Ö
    await connectToDb();
    console.log('‚úÖ Database —Ö–æ–ª–±–æ–≥–¥–ª–æ–æ');

    // ”®–º–Ω”©—Ö ”©–≥”©–≥–¥–ª–∏–π–≥ —Ü—ç–≤—ç—Ä–ª—ç—Ö
    await clearExistingData();
    console.log('üßπ ”®–º–Ω”©—Ö ”©–≥”©–≥–¥”©–ª —Ü—ç–≤—ç—Ä–ª—ç–≥–¥–ª—ç—ç');

    // –•—ç—Ä—ç–≥–ª—ç–≥—á–¥–∏–π–≥ “Ø“Ø—Å–≥—ç—Ö
    const users = await createMockUsers();
    console.log(`üë• ${users.length} —Ö—ç—Ä—ç–≥–ª—ç–≥—á “Ø“Ø—Å–≥—ç–≥–¥–ª—ç—ç`);

    // –î—É—É—á–Ω—É—É–¥—ã–≥ “Ø“Ø—Å–≥—ç—Ö
    const artists = await createMockArtists();
    console.log(`üé§ ${artists.length} –¥—É—É—á–∏–Ω “Ø“Ø—Å–≥—ç–≥–¥–ª—ç—ç`);

    // –ö–æ–Ω—Ü–µ—Ä—Ç—É—É–¥—ã–≥ “Ø“Ø—Å–≥—ç—Ö
    const concerts = await createMockConcerts(artists);
    console.log(`üéµ ${concerts.length} –∫–æ–Ω—Ü–µ—Ä—Ç “Ø“Ø—Å–≥—ç–≥–¥–ª—ç—ç`);

    // –¢–∞—Å–∞–ª–±–∞—Ä—ã–Ω –∞–Ω–≥–∏–ª–ª—É—É–¥—ã–≥ “Ø“Ø—Å–≥—ç—Ö
    const ticketCategories = await createMockTicketCategories(concerts);
    console.log(`üé´ ${ticketCategories.length} —Ç–∞—Å–∞–ª–±–∞—Ä—ã–Ω –∞–Ω–≥–∏–ª–∞–ª “Ø“Ø—Å–≥—ç–≥–¥–ª—ç—ç`);

    // –ó–∞—Ö–∏–∞–ª–≥—É—É–¥—ã–≥ “Ø“Ø—Å–≥—ç—Ö
    const bookings = await createMockBookings(users, ticketCategories);
    console.log(`üìã ${bookings.length} –∑–∞—Ö–∏–∞–ª–≥–∞ “Ø“Ø—Å–≥—ç–≥–¥–ª—ç—ç`);

    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫ —Ö–∞—Ä–∞—Ö
    await showStats();

    console.log('\nüéâ –î—ç–ª–≥—ç—Ä—ç–Ω–≥“Ø–π mock data –∞–º–∂–∏–ª—Ç—Ç–∞–π “Ø“Ø—Å–≥—ç–≥–¥–ª—ç—ç!');
    
    process.exit(0);
  } catch (error) {
    console.error('‚ùå Mock data “Ø“Ø—Å–≥—ç—Ö—ç–¥ –∞–ª–¥–∞–∞ –≥–∞—Ä–ª–∞–∞:', error);
    process.exit(1);
  }
}

// ”®–º–Ω”©—Ö ”©–≥”©–≥–¥–ª–∏–π–≥ —Ü—ç–≤—ç—Ä–ª—ç—Ö
async function clearExistingData() {
  await Booking.deleteMany({});
  await TicketCategory.deleteMany({});
  await Concert.deleteMany({});
  await Artist.deleteMany({});
  await User.deleteMany({});
}

// Mock —Ö—ç—Ä—ç–≥–ª—ç–≥—á–¥–∏–π–≥ “Ø“Ø—Å–≥—ç—Ö
async function createMockUsers() {
  const users = [
    {
      email: 'admin@concert.com',
      username: '–ê–¥–º–∏–Ω',
      phoneNumber: '99119911',
      address: '–£–ª–∞–∞–Ω–±–∞–∞—Ç–∞—Ä —Ö–æ—Ç',
      role: 'ADMIN',
      password: 'admin123'
    },
    {
      email: 'user1@concert.com',
      username: '–ë–∞—Ç–±–∞—è—Ä',
      phoneNumber: '99119912',
      address: '–£–ª–∞–∞–Ω–±–∞–∞—Ç–∞—Ä —Ö–æ—Ç, –°“Ø—Ö–±–∞–∞—Ç–∞—Ä –¥“Ø“Ø—Ä—ç–≥',
      role: 'USER',
      password: 'user123'
    },
    {
      email: 'user2@concert.com',
      username: '–°–∞—Ä–∞',
      phoneNumber: '99119913',
      address: '–£–ª–∞–∞–Ω–±–∞–∞—Ç–∞—Ä —Ö–æ—Ç, –•–∞–Ω-–£—É–ª –¥“Ø“Ø—Ä—ç–≥',
      role: 'USER',
      password: 'user123'
    },
    {
      email: 'user3@concert.com',
      username: '–¢”©–º”©—Ä',
      phoneNumber: '99119914',
      address: '–£–ª–∞–∞–Ω–±–∞–∞—Ç–∞—Ä —Ö–æ—Ç, –ë–∞—è–Ω–≥–æ–ª –¥“Ø“Ø—Ä—ç–≥',
      role: 'USER',
      password: 'user123'
    },
    {
      email: 'user4@concert.com',
      username: '–û—é—É–Ω—á–∏–º—ç–≥',
      phoneNumber: '99119915',
      address: '–£–ª–∞–∞–Ω–±–∞–∞—Ç–∞—Ä —Ö–æ—Ç, –ß–∏–Ω–≥—ç–ª—Ç—ç–π –¥“Ø“Ø—Ä—ç–≥',
      role: 'USER',
      password: 'user123'
    },
    {
      email: 'user5@concert.com',
      username: '–ë–∞—Ç—Ç—É–ª–≥–∞',
      phoneNumber: '99119916',
      address: '–£–ª–∞–∞–Ω–±–∞–∞—Ç–∞—Ä —Ö–æ—Ç, –°–æ–Ω–≥–∏–Ω–æ—Ö–∞–π—Ä—Ö–∞–Ω –¥“Ø“Ø—Ä—ç–≥',
      role: 'USER',
      password: 'user123'
    }
  ];

  return await User.insertMany(users);
}

// Mock –¥—É—É—á–Ω—É—É–¥—ã–≥ “Ø“Ø—Å–≥—ç—Ö
async function createMockArtists() {
  const artists = [
    {
      name: 'The Hu',
      bio: '–ú–æ–Ω–≥–æ–ª—ã–Ω –∞–ª–¥–∞—Ä—Ç–∞–π —Ä–æ–∫ —Ö–∞–º—Ç–ª–∞–≥. –ú–æ–Ω–≥–æ–ª—ã–Ω —É–ª–∞–º–∂–ª–∞–ª—Ç —Ö”©–≥–∂–∏–º –±–æ–ª–æ–Ω —Ä–æ–∫ —Ö”©–≥–∂–º–∏–π–≥ —Ö–æ—Å–ª—É—É–ª—Å–∞–Ω —Ç—É—Å–≥–∞–π —Ö”©–≥–∂–º–∏–π–Ω —Ö—ç–≤ –º–∞—è–≥—Ç–∞–π.',
      image: 'https://example.com/the-hu.jpg'
    },
    {
      name: '–ê–ª—Ç–∞–Ω –£—Ä–∞–≥',
      bio: '–ú–æ–Ω–≥–æ–ª—ã–Ω –∞–ª–¥–∞—Ä—Ç–∞–π –ø–æ–ø —Ö–∞–º—Ç–ª–∞–≥. –ó–∞–ª—É—É—á—É—É–¥—ã–Ω –¥—É–Ω–¥ –º–∞—à –∞–ª–¥–∞—Ä—Ç–∞–π.',
      image: 'https://example.com/altan-uraag.jpg'
    },
    {
      name: '–ë–∞—Ç–±–∞—è—Ä',
      bio: '–ú–æ–Ω–≥–æ–ª—ã–Ω –∞–ª–¥–∞—Ä—Ç–∞–π –¥—É—É—á–∏–Ω. –£–ª–∞–º–∂–ª–∞–ª—Ç –±–æ–ª–æ–Ω –æ—Ä—á–∏–Ω “Ø–µ–∏–π–Ω —Ö”©–≥–∂–º–∏–π–≥ —Ö–æ—Å–ª—É—É–ª—Å–∞–Ω.',
      image: 'https://example.com/batbayar.jpg'
    },
    {
      name: '–°–∞—Ä–∞',
      bio: '–ú–æ–Ω–≥–æ–ª—ã–Ω –∞–ª–¥–∞—Ä—Ç–∞–π —ç–º—ç–≥—Ç—ç–π –¥—É—É—á–∏–Ω. –ü–æ–ø –±–æ–ª–æ–Ω R&B —Ö”©–≥–∂–º–∏–π–Ω —Ö—ç–≤ –º–∞—è–≥—Ç–∞–π.',
      image: 'https://example.com/sara.jpg'
    },
    {
      name: '–¢”©–º”©—Ä',
      bio: '–ú–æ–Ω–≥–æ–ª—ã–Ω –∞–ª–¥–∞—Ä—Ç–∞–π —Ä—ç–ø –¥—É—É—á–∏–Ω. –ó–∞–ª—É—É—á—É—É–¥—ã–Ω –¥—É–Ω–¥ –º–∞—à –∞–ª–¥–∞—Ä—Ç–∞–π.',
      image: 'https://example.com/tomor.jpg'
    },
    {
      name: '–û—é—É–Ω—á–∏–º—ç–≥',
      bio: '–ú–æ–Ω–≥–æ–ª—ã–Ω –∞–ª–¥–∞—Ä—Ç–∞–π —ç–º—ç–≥—Ç—ç–π –¥—É—É—á–∏–Ω. –£–ª–∞–º–∂–ª–∞–ª—Ç —Ö”©–≥–∂–º–∏–π–Ω —Ö—ç–≤ –º–∞—è–≥—Ç–∞–π.',
      image: 'https://example.com/oyunchimeg.jpg'
    },
    {
      name: '–ë–∞—Ç—Ç—É–ª–≥–∞',
      bio: '–ú–æ–Ω–≥–æ–ª—ã–Ω –∞–ª–¥–∞—Ä—Ç–∞–π –¥—É—É—á–∏–Ω. –ü–æ–ø –±–æ–ª–æ–Ω —Ä–æ–∫ —Ö”©–≥–∂–º–∏–π–Ω —Ö—ç–≤ –º–∞—è–≥—Ç–∞–π.',
      image: 'https://example.com/battulga.jpg'
    },
    {
      name: '–ú”©–Ω—Ö–±–∞—è—Ä',
      bio: '–ú–æ–Ω–≥–æ–ª—ã–Ω –∞–ª–¥–∞—Ä—Ç–∞–π –¥—É—É—á–∏–Ω. –£–ª–∞–º–∂–ª–∞–ª—Ç –±–æ–ª–æ–Ω –æ—Ä—á–∏–Ω “Ø–µ–∏–π–Ω —Ö”©–≥–∂–º–∏–π–≥ —Ö–æ—Å–ª—É—É–ª—Å–∞–Ω.',
      image: 'https://example.com/munkhbayar.jpg'
    }
  ];

  return await Artist.insertMany(artists);
}

// Mock –∫–æ–Ω—Ü–µ—Ä—Ç—É—É–¥—ã–≥ “Ø“Ø—Å–≥—ç—Ö
async function createMockConcerts(artists: any[]) {
  const venues = [
    '–£–ª–∞–∞–Ω–±–∞–∞—Ç–∞—Ä —Ö–æ—Ç—ã–Ω —Ç”©–≤ —Ç–∞–ª–±–∞–π',
    '–£–ª–∞–∞–Ω–±–∞–∞—Ç–∞—Ä —Ö–æ—Ç—ã–Ω —Å–ø–æ—Ä—Ç –æ—Ä–¥–æ–Ω',
    '–£–ª–∞–∞–Ω–±–∞–∞—Ç–∞—Ä —Ö–æ—Ç—ã–Ω —Ç–µ–∞—Ç—Ä',
    '–£–ª–∞–∞–Ω–±–∞–∞—Ç–∞—Ä —Ö–æ—Ç—ã–Ω –∫–ª—É–±',
    '–£–ª–∞–∞–Ω–±–∞–∞—Ç–∞—Ä —Ö–æ—Ç—ã–Ω –∫–æ–Ω—Ü–µ—Ä—Ç—ã–Ω —Ç–∞–Ω—Ö–∏–º',
    '–£–ª–∞–∞–Ω–±–∞–∞—Ç–∞—Ä —Ö–æ—Ç—ã–Ω –∏—Ö —Å—É—Ä–≥—É—É–ª–∏–π–Ω —Ç–∞–Ω—Ö–∏–º'
  ];

  const concerts = [];
  const currentDate = new Date();
  
  for (let i = 0; i < 12; i++) {
    const mainArtist = artists[Math.floor(Math.random() * artists.length)];
    const otherArtists = artists
      .filter(a => a._id.toString() !== mainArtist._id.toString())
      .sort(() => 0.5 - Math.random())
      .slice(0, Math.floor(Math.random() * 3) + 1);

    const concertDate = new Date(currentDate);
    concertDate.setDate(concertDate.getDate() + (i * 15) + Math.floor(Math.random() * 30));

    concerts.push({
      name: `${mainArtist.name} - ${getConcertTitle()}`,
      description: `${mainArtist.name}-–≥–∏–π–Ω —Ç–æ–º–æ–æ—Ö–æ–Ω –∫–æ–Ω—Ü–µ—Ä—Ç. ${mainArtist.bio}`,
      venue: venues[Math.floor(Math.random() * venues.length)],
      date: concertDate,
      time: getRandomTime(),
      mainArtist: mainArtist._id,
      otherArtists: otherArtists.map(a => a._id),
      image: `https://example.com/concert-${i + 1}.jpg`,
      isActive: true
    });
  }

  return await Concert.insertMany(concerts);
}

// Mock —Ç–∞—Å–∞–ª–±–∞—Ä—ã–Ω –∞–Ω–≥–∏–ª–ª—É—É–¥—ã–≥ “Ø“Ø—Å–≥—ç—Ö
async function createMockTicketCategories(concerts: any[]) {
  const ticketCategories = [];

  for (const concert of concerts) {
    // VIP —Ç–∞—Å–∞–ª–±–∞—Ä
    ticketCategories.push({
      type: 'VIP',
      totalQuantity: Math.floor(Math.random() * 50) + 30,
      availableQuantity: 0, // –î–∞—Ä–∞–∞ —Ç–æ–æ—Ü–æ–æ–ª–Ω–æ
      unitPrice: Math.floor(Math.random() * 100000) + 100000,
      description: 'VIP —Ç–∞—Å–∞–ª–±–∞—Ä - —Ö–∞–º–≥–∏–π–Ω —Å–∞–π–Ω –±–∞–π—Ä–ª–∞–ª, —Ç—É—Å–≥–∞–π “Ø–π–ª—á–∏–ª–≥—ç—ç',
      features: ['–•–∞–º–≥–∏–π–Ω —Å–∞–π–Ω –±–∞–π—Ä–ª–∞–ª', '–¢—É—Å–≥–∞–π “Ø–π–ª—á–∏–ª–≥—ç—ç', '–ê—Ä—ã–Ω —Ç–∞–ª–±–∞–π', '–¢—É—Å–≥–∞–π –æ—Ä—Ü'],
      concert: concert._id
    });

    // Regular —Ç–∞—Å–∞–ª–±–∞—Ä
    ticketCategories.push({
      type: 'REGULAR',
      totalQuantity: Math.floor(Math.random() * 200) + 100,
      availableQuantity: 0, // –î–∞—Ä–∞–∞ —Ç–æ–æ—Ü–æ–æ–ª–Ω–æ
      unitPrice: Math.floor(Math.random() * 50000) + 50000,
      description: '–≠–Ω–≥–∏–π–Ω —Ç–∞—Å–∞–ª–±–∞—Ä - —Å–∞–π–Ω –±–∞–π—Ä–ª–∞–ª, —Ö—è–º–¥ “Ø–Ω—ç',
      features: ['–°–∞–π–Ω –±–∞–π—Ä–ª–∞–ª', '–•—è–º–¥ “Ø–Ω—ç', '–ê—Ä—ã–Ω —Ç–∞–ª–±–∞–π'],
      concert: concert._id
    });

    // General Admission —Ç–∞—Å–∞–ª–±–∞—Ä
    ticketCategories.push({
      type: 'GENERAL_ADMISSION',
      totalQuantity: Math.floor(Math.random() * 300) + 200,
      availableQuantity: 0, // –î–∞—Ä–∞–∞ —Ç–æ–æ—Ü–æ–æ–ª–Ω–æ
      unitPrice: Math.floor(Math.random() * 30000) + 20000,
      description: '–ï—Ä”©–Ω—Ö–∏–π —Ç–∞—Å–∞–ª–±–∞—Ä - —Ö–∞–º–≥–∏–π–Ω —Ö—è–º–¥ “Ø–Ω—ç',
      features: ['–•–∞–º–≥–∏–π–Ω —Ö—è–º–¥ “Ø–Ω—ç', '–ï—Ä”©–Ω—Ö–∏–π –±–∞–π—Ä–ª–∞–ª'],
      concert: concert._id
    });
  }

  const createdCategories = await TicketCategory.insertMany(ticketCategories);
  
  // Available quantity-–≥ —Ç–æ—Ö–∏—Ä—É—É–ª–∞—Ö
  for (const category of createdCategories) {
    category.availableQuantity = category.totalQuantity;
    await category.save();
  }

  return createdCategories;
}

// Mock –∑–∞—Ö–∏–∞–ª–≥—É—É–¥—ã–≥ “Ø“Ø—Å–≥—ç—Ö
async function createMockBookings(users: any[], ticketCategories: any[]) {
  const bookings = [];
  const userUsers = users.filter(u => u.role === 'USER');

  for (let i = 0; i < 50; i++) {
    const user = userUsers[Math.floor(Math.random() * userUsers.length)];
    const ticketCategory = ticketCategories[Math.floor(Math.random() * ticketCategories.length)];
    const quantity = Math.floor(Math.random() * 4) + 1;

    // –¢–∞—Å–∞–ª–±–∞—Ä—ã–Ω —Ç–æ–æ —Ö“Ø—Ä—ç–ª—Ü—ç—Ö —ç—Å—ç—Ö–∏–π–≥ —à–∞–ª–≥–∞—Ö
    if (ticketCategory.availableQuantity >= quantity) {
      const booking = {
        user: user._id,
        concert: ticketCategory.concert,
        ticketCategory: ticketCategory._id,
        quantity,
        unitPrice: ticketCategory.unitPrice,
        totalPrice: ticketCategory.unitPrice * quantity,
        status: getRandomStatus(),
        paymentStatus: getRandomPaymentStatus(),
        canCancel: Math.random() > 0.3,
        cancellationDeadline: new Date(Date.now() + 24 * 60 * 60 * 1000),
        bookingDate: new Date(Date.now() - Math.floor(Math.random() * 30) * 24 * 60 * 60 * 1000)
      };

      bookings.push(booking);

      // Available quantity-–≥ –±—É—É—Ä—É—É–ª–∞—Ö
      ticketCategory.availableQuantity -= quantity;
      await ticketCategory.save();
    }
  }

  return await Booking.insertMany(bookings);
}

// –¢—É—Å–ª–∞—Ö —Ñ—É–Ω–∫—Ü—É—É–¥
function getConcertTitle() {
  const titles = [
    '–ú–æ–Ω–≥–æ–ª—ã–Ω —ç—Ä—Ö—ç–º–¥—ç—ç',
    '–ó–∞–ª—É—É—á—É—É–¥—ã–Ω –¥—É—É',
    '–£–ª–∞–º–∂–ª–∞–ª—Ç —Ö”©–≥–∂–∏–º',
    '–≠–º—ç–≥—Ç—ç–π—á“Ø“Ø–¥–∏–π–Ω –¥—É—É',
    '–†–æ–∫ —Ö”©–≥–∂–º–∏–π–Ω –æ—Ä–æ–π',
    '–ü–æ–ø —Ö”©–≥–∂–º–∏–π–Ω —Ç–æ–≥–ª–æ–ª—Ç',
    '–£–ª–∞–º–∂–ª–∞–ª—Ç –±–æ–ª–æ–Ω –æ—Ä—á–∏–Ω “Ø–µ–∏–π–Ω —Ö”©–≥–∂–∏–º',
    '–•”©–≥–∂–º–∏–π–Ω –Ω–∞–∞–¥–∞–º'
  ];
  return titles[Math.floor(Math.random() * titles.length)];
}

function getRandomTime() {
  const times = ['18:00', '18:30', '19:00', '19:30', '20:00', '20:30', '21:00'];
  return times[Math.floor(Math.random() * times.length)];
}

function getRandomStatus() {
  const statuses = ['PENDING', 'CONFIRMED', 'CANCELLED'];
  const weights = [0.2, 0.7, 0.1]; // 20% pending, 70% confirmed, 10% cancelled
  const random = Math.random();
  let cumulative = 0;
  
  for (let i = 0; i < statuses.length; i++) {
    cumulative += weights[i];
    if (random <= cumulative) {
      return statuses[i];
    }
  }
  return 'CONFIRMED';
}

function getRandomPaymentStatus() {
  const statuses = ['PENDING', 'COMPLETED', 'FAILED'];
  const weights = [0.1, 0.85, 0.05]; // 10% pending, 85% completed, 5% failed
  const random = Math.random();
  let cumulative = 0;
  
  for (let i = 0; i < statuses.length; i++) {
    cumulative += weights[i];
    if (random <= cumulative) {
      return statuses[i];
    }
  }
  return 'COMPLETED';
}

// –°—Ç–∞—Ç–∏—Å—Ç–∏–∫ —Ö–∞—Ä—É—É–ª–∞—Ö
async function showStats() {
  const stats = {
    users: await User.countDocuments(),
    artists: await Artist.countDocuments(),
    concerts: await Concert.countDocuments(),
    ticketCategories: await TicketCategory.countDocuments(),
    bookings: await Booking.countDocuments()
  };

  console.log('\nüìä ”®–≥”©–≥–¥–ª–∏–π–Ω —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫:');
  console.log(`üë• –•—ç—Ä—ç–≥–ª—ç–≥—á–∏–¥: ${stats.users}`);
  console.log(`üé§ –î—É—É—á–Ω—É—É–¥: ${stats.artists}`);
  console.log(`üéµ –ö–æ–Ω—Ü–µ—Ä—Ç—É—É–¥: ${stats.concerts}`);
  console.log(`üé´ –¢–∞—Å–∞–ª–±–∞—Ä—ã–Ω –∞–Ω–≥–∏–ª–ª—É—É–¥: ${stats.ticketCategories}`);
  console.log(`üìã –ó–∞—Ö–∏–∞–ª–≥—É—É–¥: ${stats.bookings}`);

  console.log('\nüìù –¢–µ—Å—Ç —Ö–∏–π—Ö—ç–¥ –∑–æ—Ä–∏—É–ª—Å–∞–Ω —Ö—ç—Ä—ç–≥–ª—ç–≥—á–¥–∏–π–Ω –º—ç–¥—ç—ç–ª—ç–ª:');
  console.log('üë§ –ê–¥–º–∏–Ω: admin@concert.com / admin123');
  console.log('üë§ –•—ç—Ä—ç–≥–ª—ç–≥—á 1: user1@concert.com / user123');
  console.log('üë§ –•—ç—Ä—ç–≥–ª—ç–≥—á 2: user2@concert.com / user123');
  console.log('üë§ –•—ç—Ä—ç–≥–ª—ç–≥—á 3: user3@concert.com / user123');
  console.log('üë§ –•—ç—Ä—ç–≥–ª—ç–≥—á 4: user4@concert.com / user123');
  console.log('üë§ –•—ç—Ä—ç–≥–ª—ç–≥—á 5: user5@concert.com / user123');
}

// Script –∞–∂–∏–ª–ª—É—É–ª–∞—Ö
if (require.main === module) {
  generateMockData();
}

export { generateMockData };
